/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
 };
&sk {
     release-after-ms = <2000>;
     quick-release;
 };
 
/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3
#define NUM 4
#define SYS 5
#define BT 6
#define FUN 7
#define AL2U 8
/ { 
    combos {
      compatible = "zmk,combos";
      combo_sys {
          timeout-ms = <30>;
          key-positions = <3 4 5>;
          bindings = <&to SYS>;
      };
      combo_caps {
          timeout-ms = <30>;
          key-positions = <10 11 12>;
          bindings = <&caps_word>;
      };
      combo_num {
          timeout-ms = <30>;
          key-positions = <0 1 2>;
          bindings = <&to NUM>;
      };
      combo_bt  {
          timeout-ms = <10>;
          key-positions = <7 9>;
          bindings = <&to BT>;
          layers = <SM1>;
      };
      combo_fun  {
          timeout-ms = <10>;
          key-positions = <10 12>;
          bindings = <&to FUN>;
          layers = <AL1>;
      };
      bksp {
        timeout-ms = <50>;
        key-positions = <4 5>;
        bindings = <&kp BKSP>;
        layers = <AL1 AL2 AL2U>;
      };
      ret {
        timeout-ms = <50>;
        key-positions = <11 12>;
        bindings = <&kp RET>;
        layers = <AL1 AL2 AL2U>;
      };
      tab {
        timeout-ms = <50>;
        key-positions = <7 8>;
        bindings = <&kp TAB>;
        layers = <AL1 AL2 AL2U>;
      };
      esc {
        timeout-ms = <50>;
        key-positions = <0 1>;
        bindings = <&kp ESC>;
        layers = <AL1 AL2 AL2U>;
      };
      number_8 {
        timeout-ms = <200>;
        key-positions = <4 5>;
        bindings = <&kp N8>;
        layers = <NUM>;
      };
      number_0 {
        timeout-ms = <200>;
        key-positions = <11 12>;
        bindings = <&kp N0>;
        layers = <NUM>;
      };
      number_7 {
        timeout-ms = <200>;
        key-positions = <3 4>;
        bindings = <&kp N7>;
        layers = <NUM>;
      };
      number_9 {
        timeout-ms = <200>;
        key-positions = <10 11>;
        bindings = <&kp N9>;
        layers = <NUM>;
      };
    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_L";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-on-release;              // requires PR #1423
            hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
        };
        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_R";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-on-release;              // requires PR #1423
            hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
        };
        sr: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&to>;

             quick_tap_ms = <175>;
            // retro-tap;
        };
        hl_l: homerow_layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_L";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-on-release;              // requires PR #1423
            hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
        };
        hl_r: homerow_layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_R";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-on-release;              // requires PR #1423
            hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
        };
    td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
   	alpha2macro: behavior_macro_1 {
			compatible = "zmk,behavior-macro";
			label = "MACRO1";
			#binding-cells = <0>;
			bindings = < &sl AL2 >;
		};
	caps_alpha2macro: behavior_macro_2 {
			compatible = "zmk,behavior-macro";
			label = "MACRO2";
			#binding-cells = <0>;
			bindings = < &sl AL2U >;
		};
  };

//                  0       1       2                   3       4           5
//          6       7       8       9                   10      11          12          13
//                          14      15                  16      17
       keymap {
                compatible = "zmk,keymap";
                
                alpha1 {
                label = "Base";
        bindings = <
            &hm_l LCTL G    &hm_l LALT C    &hm_l LGUI D          &hm_r RGUI H    &hm_r LALT U        &hm_r RCTL L
            &hl_l NUM A     &hl_l SM2 R     &hl_l SM1 S     &hl_l SYS T                 &hl_r SYS N     &hl_r SM1 E         &hl_r SM2 I     &hl_r NUM O
                                            &mt LC(LS(LALT)) SPC &key_repeat          &sk LSHIFT	&sl AL2  
        >;
        };
                alpha2 {
                label = "Al2";
        bindings = <
              &kp V       &kp W               &kp M            &kp F       &kp SQT         &kp Z 
        &kp Q       &kp J       &kp K               &kp P            &kp B       &td COMMA DOT    &kp X       &kp Y
                               &kp SPC &trans               &sr LSHIFT AL1 &sl AL2U     
        >;
        };

                sym1 {
                label = "Code";
        bindings = <
                  &kp EXCL	&kp ATSN	&kp HASH                    &kp AMPS		&kp STAR		&kp QMARK
        &kp GRAVE	&kp DLLR	&kp PRCNT	&kp CARET                   &kp UNDER		&kp BSLH		&kp PIPE &kp TILDE
                                &trans &kp RALT                  &sr LSHIFT AL1 &kp RGUI        
        >;
        };
        sym2 {
        label = "Punct";
        bindings = <
                 &trans &kp LT	&kp GT                       &kp LPAR	&kp RPAR    &kp LBRC	
        &kp SEMI    &kp PRCNT   &kp TILDE	&kp UNDER          &kp LBKT	&kp RBKT	&kp RBRC    &trans
                                  &trans  &kp RALT          &sr LSHIFT AL1 &kp RGUI

        >;
        };

        num {
        label = "Num";
        bindings = <
                        &hm_l LCTL DOT	&hm_l LALT COMMA	&hm_l LGUI SEMI    &hm_r RGUI N1	&hm_r RALT N2	&hm_r RCTL N3
        &kp SLASH	&kp MINUS		&kp PLUS			&kp COLON           &kp N4			&kp N5			&kp N6		&kp EQUAL
                                               &kp RCTL &kp RALT    &sr LSHIFT AL1  &kp RGUI        
        >;
        };

        sys {
        label = "Nav";
        bindings = <
                          &kp ESC        &kp LG(LS(LBKT))    &kp LG(LS(RBKT))      &td LG(V) LG(C)     &td PG_UP UP    &td Q BKSP
        &td LG(GRAVE) TAB   &kp DEL        &td HOME LG(LBKT)   &td END LG(RBKT)      &kp  LEFT            &td PG_DN DOWN  &td  LG(LS(N5)) RIGHT   &kp RET
                                            &kp LCTL &kp RALT               &sr LSHIFT AL1 &kp RGUI           
        >;
        };

        bt {
        label = "BT";
        bindings = <
                &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2         &bt BT_SEL 3     &bt BT_SEL 4   &trans
        &bt BT_CLR    &trans          &trans        &bootloader        &bootloader      &trans         &trans &bt BT_CLR
                                               &trans &trans         &to AL1 &trans
        >;
        };
        fun {
        label = "Fn";
            bindings = <
                   &kp F11   &kp F10   &kp F1        &kp F2   &kp F3   &kp F4
     &kp C_BRI_DN  &kp F12   &kp F5    &kp F6        &kp F7   &kp F8   &kp F9  &kp C_BRI_UP
                       &kp C_VOL_DN &td SPC C_MUTE   &to AL1   &kp C_VOL_UP    
                >;
        };
	alpha2cap {
		bindings = <
			&kp LS(V)	&kp LS(W)	&kp LS(M) 	 	&kp LS(F)    	&kp LS(SQT)		&kp LS(Z)	
			&kp LS(Q) 	&kp LS(J) 	&kp LS(K)	&kp LS(P)		&kp LS(B)	&kp COMMA	&kp LS(X)	&kp LS(Y) 
			 		&trans 		&trans 			&trans	&trans
		>;
	};
    };
};
